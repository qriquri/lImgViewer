import { app, BrowserWindow, Menu, Tray } from 'electron';
import { debounce } from './alterLodash';
import { getSelectedFile } from './argParse';
import AppConfig from './config/AppConfig';
import EWindow, { defaultWindowOptions } from './elcObj/EWindow';
import IpcMain from './elcObj/IpcMainReceiver';
import { getFiles } from './file/file';
import { appIcon, isDev } from './util/util';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const gotTheLock = app.requestSingleInstanceLock();

app.disableHardwareAcceleration()

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createTrayIcon = () => {
  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Show window',
      click: () => {
        if(BrowserWindow.getAllWindows().length === 0){
          createWindow();
        }else{
          BrowserWindow.getAllWindows()[0].focus();
        }
      }
     },
     {
      label: 'Exit',
      click: () => {
        app.quit();
      }
     }
  ]);
  const tray = new Tray(appIcon);
  tray.setContextMenu(contextMenu)
  tray.setToolTip(app.name);
}

const createWindow = (argv?: string[]): void => {
  // Create the browser window.
  const mainWindow = EWindow.createNewWindow(MAIN_WINDOW_WEBPACK_ENTRY, {
    ...defaultWindowOptions,
    width: AppConfig.getConfigData().windowSize.width,
    height: AppConfig.getConfigData().windowSize.height,
    frame: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
    },
  });
  mainWindow.on('resized', () => {
    mainWindow.webContents.send('resized', mainWindow.isMaximized());
    AppConfig.setConfigData({
      ...AppConfig.getConfigData(),
      windowSize: {
        width: mainWindow.getSize()[0],
        height: mainWindow.getSize()[1],
      },
    });
  });
  mainWindow.on('maximize', () => {
    console.log('maximize');
    mainWindow.webContents.send('resized', mainWindow.isMaximized());
  });
  mainWindow.on('unmaximize', () => {
    console.log('unmaximize');
    mainWindow.webContents.send('resized', mainWindow.isMaximized());
  });
  mainWindow.once('ready-to-show', () => {
    if (getSelectedFile(argv)) {
      mainWindow.webContents.send('open-dir-res', getFiles(getSelectedFile(argv)));
    }
    EWindow.showWin(mainWindow, isDev());
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  console.log('hello world');
  IpcMain.listen();
  AppConfig.loadConfig();
  createWindow();
  createTrayIcon();
});

if (!gotTheLock) {
  /**
   * すでにインスタンスが存在する場合は
   * あたらしいインスタンスはそのまま終了させる
   */
  app.exit();
} else {
  // これが呼ばれるのは1目のインスタンス
  // ifは2つ目以降のインスタンスで起こり,elseは1つ目のインスタンスで呼ばれる
  app.on(
    'second-instance',
    (
      event: Electron.Event,
      argv: string[],
      workingDirectory: string,
      additionalData: unknown,
    ) => {
      console.log('second-instance', argv);
      // このときのargvは引数は一つ増えていることに気を付ける
      argv.splice(1, 1)
      createWindow(argv);
    });
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  // if (process.platform !== 'darwin') {
  //   app.quit();
  // }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('quit', () => {
  AppConfig.writeConfig();

  console.log('write config');
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
